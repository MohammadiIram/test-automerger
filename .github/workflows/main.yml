# name: Auto Merge PRs

# on:
#   workflow_dispatch:
#     inputs:
#       branch:
#         description: 'Branch to run the script on'
#         required: true
#         default: 'main'

# jobs:
#   auto-merge-prs:
#     runs-on: ubuntu-latest

#     permissions:
#       pull-requests: write  # Grant write permission to pull requests
#       contents: read  # Ensure that the workflow has read access to repository contents

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ github.event.inputs.branch }}
#           fetch-depth: 0  # Fetch all history for all branches and tags

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.x'

#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       - name: Run auto-merge script
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
#           JIRA_API_TOKEN: ${{ secrets.JIRA_TEST }}
#         run: python main.py



name: Run auto-merge script

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the Python script on'
        required: true
        default: 'main'

jobs:
  auto-merge-prs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Script
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_TEST }}
        run: |
          python main.py --branch ${{ github.event.inputs.branch }}
          
      - name: Generate and Clean Summary Output
        id: summary
        run: |
          # Capture output from the script
          output=$(cat script_output.txt)
        
          # Ensure the output is not empty
          if [ -z "$output" ]; then
            echo "No output from script."
            output="No relevant information generated."
          fi
          formatted_output=$(echo "$output" | sed -E 's/\x1b\[[0-9;]*m//g')
          # Remove commit information (if present in the output)
          formatted_output=$(echo "$formatted_output" | sed '/Commit/d')
          # Get PR ID and Repo name from the input
          pr_id="${{ github.event.inputs.pr_id }}"
          repo="${{ github.event.inputs.repo }}"
        
          # Construct the PR URL using the provided repo name
          pr_url="https://github.com/rhoai-rhtap/${repo}/pull/${pr_id}"
          # Prepare the Slack message with cleaner formatting
          #slack_message="*PR ID:* ${pr_id}$'\n'*Repository:* ${repo}$'\n'*PR URL:* ${pr_url}$'\n'*Output:*$'\n'${formatted_output}$'\n'!"
          slack_message="*PR ID:* ${pr_id}\n*Repository:* ${repo}\n*PR URL:* ${pr_url}\n*Output:*\n${formatted_output}\n:here!"
          # Set the message for Slack using GITHUB_OUTPUT
          {
            echo "slack-message<<EOF"
            echo -e "$slack_message"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
      # Slack Notification on Success
      - name: Slack Notification on Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFIER }}
          SLACK_USERNAME: "Auto-Merge"
          SLACK_TITLE: "Merge Summary"
          SLACK_MESSAGE: ${{ steps.summary.outputs.slack-message }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/95714513?s=400&u=a00afc56cfc57ef9aa0fab1540f70a8507df3e96
          SLACK_COLOR: '#36a64f'  # Green color for success

      # Slack Notification on Failure
      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFIER }}
          SLACK_USERNAME: "Auto-Merge"
          SLACK_TITLE: "Merge Failed"
          SLACK_MESSAGE: ${{ steps.summary.outputs.slack-message }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/95714513?s=400&u=a00afc56cfc57ef9aa0fab1540f70a8507df3e96
          SLACK_COLOR: '#ff0000'  # Red color for failure

